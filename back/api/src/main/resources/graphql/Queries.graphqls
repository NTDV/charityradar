type Query {
    getAllNews: [News]!
    getNewsByFundId(fundId: Int!): [News]

    getAllFunds: [Fund]!

    searchFundAndFeesByName(query: String!): FundAndFees!

    getAllFees: [Fees]!
    getFeesByFundId(fundId: Int!): [Fees]
    getFeesById(feesId: Int!): Fees

    getAllEvents: [Event]!
    getEventsByFundId(fundId: Int!): [Event]

    getTransactionsByUserId(userId: Int!): [Transaction]
    getTransactionsByFundId(fundId: Int!): [Transaction]
    getExpenseTransactionsByFundId(fundId: Int!): [Transaction]
    authByLoginPass(login: String!, password: String!): Auth
    authByVTBId(login: String!, password: String!): Auth
    logout(token: String!): Boolean!

    sendLetterToConfirmEmail(token: String!): Boolean!
    sendLetterToResetPassword(login: String!): Boolean!

    getBalanceInfo(token: String!): BalanceMixed
    getBalanceByFundId(fundId: ID!): Balance
    getAllBalance: [Balance]!

    getTopFund: [Fund]!
    getTopFees: [Fees]!

    getMainCardInfo(token: String!): Card
    addToUserBalance(token: String!, card: CardInput!, amount: Float!): Balance

    payToFund(token: String!, card: CardInput!, amount: Float!, fundId: ID!): Balance
    payToFees(token: String!, card: CardInput!, amount: Int!, feesId: ID!): Int!
    payToFundByBalance(token: String!, amount: Float!, fundId: ID!): [Balance!]!
    payToFeesByBalance(token: String!, amount: Float!, feesId: ID!): IntegerAndBalance!

    payFromFundToFees(token: String!, amount: Int!, feesId: ID!): IntegerAndBalance!

# Delete before deploying production
    getAllUsers: [User]!
    getAllAuth: [Auth]!
    getFundById(id: Int!): Fund!
    getAuthByLogin(login: String!): Auth!
    getAuthByToken(token: String!): Auth!
    getUserById(id: Int!): User!
    getUserByEmail(email: String!): User!
}